name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.4'  # Use stable Go version

    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          raw_version="${GITHUB_REF#refs/tags/}"
          clean_version="${raw_version#v}"
          echo "version=$clean_version" >> $GITHUB_OUTPUT
        else
          echo "version=dev-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        fi

    # Add code signing preparation (optional)
    - name: Prepare build environment
      run: |
        echo "Building release version ${{ steps.version.outputs.version }}"
        # Add any build-time metadata or signing preparation here

    - name: Build binaries with enhanced metadata
      run: |
        mkdir -p dist
        targets=(
          "linux/amd64"
          "linux/arm64"
          "windows/amd64"
          "windows/arm64"
          "darwin/amd64"
          "darwin/arm64"
        )
        
        # Enhanced build flags to reduce false positives
        BUILD_FLAGS="-ldflags=-s -w -X main.version=${{ steps.version.outputs.version }} -X main.buildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        
        for target in "${targets[@]}"; do
          GOOS=${target%/*}
          GOARCH=${target#*/}
          output_name="go-knigavuhe-${{ steps.version.outputs.version }}-${GOOS}-${GOARCH}"
          
          if [ "$GOOS" = "windows" ]; then
            output_name+=".exe"
          fi
          
          echo "Building ${output_name}..."
          GOOS=$GOOS GOARCH=$GOARCH go build $BUILD_FLAGS -o "dist/$output_name" ./cmd/go-knigavuhe
          
          # Create archives
          if [ "$GOOS" = "windows" ]; then
            (cd dist && zip "${output_name%.exe}.zip" "$output_name")
            rm "dist/$output_name"
          else
            (cd dist && tar -czf "$output_name.tar.gz" "$output_name")
            rm "dist/$output_name"
          fi
        done

    - name: Create source archive
      run: |
        git archive --format=tar.gz --prefix=go-knigavuhe-${{ steps.version.outputs.version }}/ HEAD > dist/go-knigavuhe-${{ steps.version.outputs.version }}-src.tar.gz
        git archive --format=zip --prefix=go-knigavuhe-${{ steps.version.outputs.version }}/ HEAD > dist/go-knigavuhe-${{ steps.version.outputs.version }}-src.zip

    - name: Generate checksums and metadata
      run: |
        cd dist
        sha256sum * > checksums.txt
        
        # Create a metadata file for transparency
        cat > release-info.txt << EOF
        Release: go-knigavuhe ${{ steps.version.outputs.version }}
        Build Date: $(date -u)
        Go Version: $(go version)
        Git Commit: $(git rev-parse HEAD)
        
        This is a legitimate audiobook downloader for knigavuhe.org
        Source code: https://github.com/${{ github.repository }}
        
        If your antivirus flags this as malware, it's a false positive.
        The software downloads audiobooks from a legal Russian audiobook site.
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## Download Instructions
          
          **Important**: Some antivirus software may flag these binaries as false positives due to network download behavior. This is a legitimate audiobook downloader.
          
          ### For Windows Users:
          - Download the appropriate `.zip` file for your architecture
          - Extract and run from command line
          - If Windows Defender blocks it, you may need to add an exception
          
          ### For Linux/macOS Users:
          - Download the appropriate `.tar.gz` file
          - Extract: `tar -xzf go-knigavuhe-*.tar.gz`
          - Run: `./go-knigavuhe-* <output-dir> <url-file>`
          
          ## Verification
          - Check `checksums.txt` for file integrity
          - Source code is available for review
          - Build reproducibly using the provided GitHub Actions workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts (for manual runs)
      if: github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ steps.version.outputs.version }}
        path: dist/
        retention-days: 30