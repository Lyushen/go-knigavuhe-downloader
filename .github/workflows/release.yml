name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.4'

    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          raw_version="${GITHUB_REF#refs/tags/}"
          clean_version="${raw_version#v}"
          echo "version=$clean_version" >> $GITHUB_OUTPUT
        else
          echo "version=dev-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        fi

    - name: Build reproducible binaries
      run: |
        mkdir -p dist
        
        # Reproducible build settings
        export CGO_ENABLED=0
        export GOFLAGS="-trimpath -mod=readonly"
        export SOURCE_DATE_EPOCH=$(git log -1 --format=%ct)
        
        # Build metadata for transparency
        GIT_COMMIT=$(git rev-parse HEAD)
        BUILD_DATE=$(date -u -d @${SOURCE_DATE_EPOCH} +%Y-%m-%dT%H:%M:%SZ)
        GO_VERSION=$(go version | cut -d' ' -f3)
        
        # Enhanced ldflags for reproducible builds
        LDFLAGS="-s -w -buildid= -X main.version=${{ steps.version.outputs.version }} -X main.gitCommit=${GIT_COMMIT} -X main.buildDate=${BUILD_DATE} -X main.goVersion=${GO_VERSION}"
        
        targets=(
          "linux/amd64"
          "linux/arm64" 
          "windows/amd64"
          "windows/arm64"
          "darwin/amd64"
          "darwin/arm64"
        )
        
        for target in "${targets[@]}"; do
          GOOS=${target%/*}
          GOARCH=${target#*/}
          
          output_name="go-knigavuhe-${{ steps.version.outputs.version }}-${GOOS}-${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            output_name+=".exe"
          fi
          
          echo "Building ${output_name}..."
          GOOS=$GOOS GOARCH=$GOARCH go build -ldflags="$LDFLAGS" -o "dist/$output_name" ./cmd/go-knigavuhe
        done

    - name: Generate build attestation
      run: |
        cd dist
        
        # Create detailed build information
        cat > build-info.json << EOF
        {
          "version": "${{ steps.version.outputs.version }}",
          "git_commit": "$(git rev-parse HEAD)",
          "git_tag": "$(git describe --tags --exact-match 2>/dev/null || echo 'none')",
          "build_date": "$(date -u -d @${SOURCE_DATE_EPOCH:-$(date +%s)} +%Y-%m-%dT%H:%M:%SZ)",
          "go_version": "$(go version)",
          "runner_os": "${{ runner.os }}",
          "runner_arch": "${{ runner.arch }}",
          "github_sha": "${{ github.sha }}",
          "github_ref": "${{ github.ref }}",
          "workflow_run_id": "${{ github.run_id }}",
          "workflow_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
          "source_url": "https://github.com/${{ github.repository }}/tree/${{ github.sha }}",
          "build_flags": "-trimpath -mod=readonly",
          "cgo_enabled": false
        }
        EOF
        
        # Generate checksums
        sha256sum *.exe > checksums-windows.txt 2>/dev/null || true
        sha256sum go-knigavuhe-*-linux-* go-knigavuhe-*-darwin-* > checksums-unix.txt 2>/dev/null || true
        sha256sum * > checksums-all.txt
        
        # Create verification instructions
        cat > VERIFY.md << 'EOF'
        # Verification Instructions
        
        ## Source Code Verification
        1. **Commit Hash**: Check that the git commit in `build-info.json` matches the tagged release
        2. **Workflow**: View the build process at the workflow URL in `build-info.json`
        3. **Reproducible Build**: Clone the repo at the exact commit and build with identical flags
        
        ## File Integrity Verification
        ```bash
        # Verify checksums (Linux/macOS)
        sha256sum -c checksums-all.txt
        
        # Windows PowerShell
        Get-FileHash *.exe -Algorithm SHA256 | Format-Table
        # Compare with checksums-windows.txt
        ```
        
        ## Reproducible Build Instructions
        ```bash
        git clone https://github.com/${{ github.repository }}.git
        cd go-knigavuhe
        git checkout ${{ github.sha }}
        
        export CGO_ENABLED=0
        export GOFLAGS="-trimpath -mod=readonly"
        export SOURCE_DATE_EPOCH=$(git log -1 --format=%ct)
        
        # Build for your platform
        go build -ldflags="-s -w -buildid=" -o go-knigavuhe ./cmd/go-knigavuhe
        
        # Compare hash with released binary
        sha256sum go-knigavuhe
        ```
        
        ## Anti-virus False Positives
        This software downloads files and creates directories, which may trigger heuristic detection.
        - **It's a false positive** - the source code is fully auditable
        - Submit false positive reports to your AV vendor
        - Build from source using instructions above for maximum trust
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          dist/*.exe
          dist/go-knigavuhe-*-linux-*
          dist/go-knigavuhe-*-darwin-*
          dist/checksums-*.txt
          dist/build-info.json
          dist/VERIFY.md
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## 🔒 Security & Verification
          
          **No archives** - All binaries are uploaded directly to reduce AV false positives.
          
          ### ✅ Verify Authenticity
          - Check `build-info.json` for build details and workflow link
          - Verify checksums with `checksums-*.txt` files  
          - View full build log in GitHub Actions
          - Reproduce the build locally (see `VERIFY.md`)
          
          ### 🛡️ Anti-virus Warning
          Some AV software may flag these as suspicious due to network downloading behavior. 
          **This is a false positive.** The source code is fully open and auditable.
          
          ### 📥 Download Instructions
          
          **Windows**: Download `go-knigavuhe-*-windows-amd64.exe`
          **Linux**: Download `go-knigavuhe-*-linux-amd64` 
          **macOS**: Download `go-knigavuhe-*-darwin-amd64`
          
          ### 🔍 Usage
          ```bash
          ./go-knigavuhe <output-directory> <urls-file>
          ```
          
          Built from commit: `${{ github.sha }}`
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts (for manual runs)  
      if: github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ steps.version.outputs.version }}
        path: |
          dist/*.exe
          dist/go-knigavuhe-*-linux-*
          dist/go-knigavuhe-*-darwin-*
          dist/checksums-*.txt
          dist/build-info.json
          dist/VERIFY.md
        retention-days: 30